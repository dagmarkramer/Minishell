 #include <stdio.h>
#include <readline/readline.h>
#include <readline/history.h>
readline (const char *prompt); readline will read a line from the terminal and return it, using
       prompt as a prompt.  If prompt is NULL or the empty string, no
       prompt is issued.  The line returned is allocated with malloc(3);
       the caller must free it when finished.  The line returned has the
       final newline removed, so only the text of the line remains.
readline returns the text of the line read.  A blank line returns
       the empty string.  If EOF is encountered while reading a line,
       and the line is empty, NULL is returned.  If an EOF is read with
       a non-empty line, it is treated as a newline.
rl_clear_history

rl_on_new_line

rl_replace_line

rl_redisplay

add_history

printf, malloc, free, write, access, open, read,
close, fork, wait, waitpid, wait3, wait4,

signal

sigaction

sigemptyset

sigaddset

kill

exit,
getcwd(char *buf, size_t size); copies the absolute pathname of the current working
     directory into the memory referenced by buf and returns a pointer to buf.
     The size argument is the size, in bytes, of the array referenced by buf
Upon successful completion, a pointer to the pathname is returned.  Other-
     wise a NULL pointer is returned and the global variable errno is set to
     indicate the error.  In addition, getwd() copies the error message associ-
     ated with errno into the memory referenced by buf.

chdir

stat: obtains information about the file pointed to by path

lstat

fstat

unlink, execve,
dup, dup2, pipe, 

#include <dirent.h>
opendir(const char *filename); opens the directory named by filename, associates a
     directory stream with it and returns a pointer to be used to identify the
     directory stream in subsequent operations.  The pointer NULL is returned if
     filename cannot be accessed, or if it cannot malloc(3) enough memory to
     hold the whole thing, and sets the global variable errno to indicate the
     error.

readdir

closedir,

strerror

perror,
isatty

ttyname get name of associated terminal (tty) from
     file descriptor

ttyslot

ioctl

getenv(const char *name);obtains the current value of the environment vari-
     able, name.  The application should not modify the string pointed to by the
     getenv() function.

tcsetattr

tcgetattr

#include <curses.h>
#include <term.h>
tgetent

tgetflag

tgetnum

tgetstr

tgoto

tputs

gcc -lreadline -lncurses src/*.c Libft/*.c -I headers/ && ./a.out

set: see local variables

rm -fsanitize=addres van makefile